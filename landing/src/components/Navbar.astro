---
import appsByLukeLogo from '../assets/appsbyluke.svg';

const pathname = new URL(Astro.request.url).pathname;
const currentPath = pathname.slice(1);

const navItems = [
    {name: 'Home', href: '/'},
    {name: 'Services', href: '/services'},
    {name: 'About', href: '/about'},
    {name: 'Contact', href: '/contact'},
];
---

<nav class="border-b-4 border-black bg-white">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex items-center justify-between h-36">
            <div class="flex-shrink-0 flex items-center transform -rotate-2">
                <a href="/" class="inline-block">
                    <img
                            src={appsByLukeLogo.src}
                            width="256.2"
                            height="120"
                            alt="AppsByLuke Logo"
                    />
                </a>
            </div>
            <div class="hidden md:block">
                <div class="ml-10 flex items-baseline space-x-4">
                    {navItems.map((item, index) => (
                            <a
                                    href={item.href}
                                    class={`text-black hover:bg-blue-500 hover:text-white px-4 py-3 text-lg font-bold transition duration-150 ease-in-out border-4 border-black transform ${index % 2 === 0 ? 'rotate-1' : '-rotate-1'} shadow-[4px_4px_0px_0px_rgba(0,0,0,1)] hover:shadow-[2px_2px_0px_0px_rgba(0,0,0,1)] ${
                                        (currentPath === '' && item.href === '/') ||
                                        (currentPath !== '' && item.href.slice(1) === currentPath)
                                            ? 'bg-blue-200 -rotate-2 scale-105'
                                            : ''
                                    }`}
                            >
                                {item.name}
                            </a>
                    ))}
                </div>
            </div>
            <div class="md:hidden">
                <button id="mobile-menu-button"
                        class="text-black hover:text-blue-500 border-4 border-black p-2 transform rotate-3 shadow-[4px_4px_0px_0px_rgba(0,0,0,1)] hover:shadow-[2px_2px_0px_0px_rgba(0,0,0,1)] transition-all duration-300 bg-blue-200"
                        aria-label="Toggle mobile menu">
                    <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                              d="M4 6h16M4 12h16M4 18h16"></path>
                    </svg>
                </button>
            </div>
        </div>
    </div>
    <div id="mobile-menu" class="hidden md:hidden bg-white border-t-4 border-black">
        <div class="px-2 pt-2 pb-3 space-y-4 sm:px-3">
            {navItems.map((item, index) => (
                    <a
                            href={item.href}
                            class={`text-black hover:bg-blue-500 hover:text-white block px-3 py-2 text-base font-bold border-4 border-black my-2 transform ${index % 2 === 0 ? 'rotate-1' : '-rotate-1'} shadow-[4px_4px_0px_0px_rgba(0,0,0,1)] hover:shadow-[2px_2px_0px_0px_rgba(0,0,0,1)] transition-all duration-300 ${
                                (currentPath === '' && item.href === '/') ||
                                (currentPath !== '' && item.href.slice(1) === currentPath)
                                    ? 'bg-blue-200 -rotate-2'
                                    : ''
                            }`}
                    >
                        {item.name}
                    </a>
            ))}
        </div>
    </div>
</nav>

<script is:inline>
    document.addEventListener('astro:page-load', () => {
        const mobileMenuButton = document.getElementById('mobile-menu-button');
        const mobileMenu = document.getElementById('mobile-menu');

        if (mobileMenuButton && mobileMenu) {
            mobileMenuButton.addEventListener('click', (event) => {
                if (event.target === mobileMenuButton || mobileMenuButton.contains(event.target)) {
                    mobileMenu.classList.toggle('hidden');
                    event.stopPropagation();
                }
            });
        }
    });

    document.addEventListener('click', (event) => {
        const mobileMenu = document.getElementById('mobile-menu');
        const mobileMenuButton = document.getElementById('mobile-menu-button');

        if (mobileMenu && !mobileMenu.classList.contains('hidden') &&
            !mobileMenu.contains(event.target) &&
            event.target !== mobileMenuButton &&
            !mobileMenuButton.contains(event.target)) {
            mobileMenu.classList.add('hidden');
        }
    });
</script>