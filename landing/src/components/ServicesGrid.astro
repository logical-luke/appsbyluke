---
import {Icon} from 'astro-icon/components'

const developmentPackages = [
    {
        name: "Startup Core",
        price: 4999,
        paymentStructure: [
            {amount: 2500, phase: "To start"},
            {amount: 1250, phase: "Midpoint"},
            {amount: 1249, phase: "Completion"}
        ],
        paymentButton: 'https://buy.appsbyluke.com/overlay/8949f95f-e9b4-4d34-b216-6e007fc07ff3',
        timeline: "1 week",
        description: "Launch your MVP with one core feature to validate your idea",
        idealFor: [
            "Pre-seed startups",
            "First-time founders",
            "Idea validation phase"
        ],
        coreFeatures: [
            {
                icon: "tabler:components",
                text: "One Core Feature",
                detail: "Your main product functionality"
            },
            {
                icon: "tabler:browser",
                text: "Single Page Landing",
                detail: "Professional landing page design"
            },
            {
                icon: "tabler:users",
                text: "Authentication System",
                detail: "Login, registration, password reset"
            },
            {
                icon: "tabler:brand-stripe",
                text: "Payment Integration",
                detail: "Stripe or similar payment processor"
            },
            {
                icon: "tabler:dashboard",
                text: "Basic Admin Panel",
                detail: "Manage users and content"
            },
            {
                icon: "tabler:chart-line",
                text: "Basic Analytics",
                detail: "Google Analytics/Plausible setup"
            },
            {
                icon: "tabler:server",
                text: "Infrastructure Setup",
                detail: "Secure hosting configuration"
            }
        ],
    },
    {
        name: "Startup Plus",
        price: 9999,
        paymentStructure: [
            {amount: 5000, phase: "To start"},
            {amount: 2500, phase: "Midpoint"},
            {amount: 2499, phase: "Completion"}
        ],
        paymentButton: 'https://buy.appsbyluke.com/overlay/b374e799-d709-4916-9cb0-99400692db1b',
        timeline: "2 weeks",
        description: "Enhanced MVP with additional features and better user experience",
        idealFor: [
            "Funded startups",
            "Products with initial traction",
            "B2B SaaS applications"
        ],
        coreFeatures: [
            {
                icon: "tabler:components",
                text: "Three Core Features",
                detail: "Extended product functionality"
            },
            {
                icon: "tabler:browser",
                text: "Landing + 2 Subpages",
                detail: "Extended website presence"
            },
            {
                icon: "tabler:users-group",
                text: "Team Management",
                detail: "Multi-user organizations"
            },
            {
                icon: "tabler:shield-lock",
                text: "Advanced User Roles",
                detail: "Custom permissions system"
            },
            {
                icon: "tabler:chart-dots",
                text: "Advanced Analytics",
                detail: "Custom events tracking"
            }
        ],
        includesCore: true
    },
    {
        name: "Startup Pro",
        price: 19999,
        paymentStructure: [
            {amount: 10000, phase: "To start"},
            {amount: 5000, phase: "Midpoint"},
            {amount: 4999, phase: "Completion"}
        ],
        paymentButton: 'https://buy.appsbyluke.com/overlay/f6ff4cb8-3537-4144-b7b5-fb22867c8c22',
        timeline: "4 weeks",
        description: "Advanced application ready for scaling",
        idealFor: [
            "Funded startups",
            "High-growth products",
            "Complex B2B solutions"
        ],
        coreFeatures: [
            {
                icon: "tabler:components",
                text: "Five Core Features",
                detail: "Advanced product functionality"
            },
            {
                icon: "tabler:browser",
                text: "Landing + 4 Subpages",
                detail: "Full website architecture"
            },
            {
                icon: "tabler:report-analytics",
                text: "Advanced Analytics Suite",
                detail: "Custom dashboards and reporting"
            },
            {
                icon: "tabler:api",
                text: "API Access",
                detail: "Full REST API with documentation"
            },
            {
                icon: "tabler:webhook",
                text: "Webhook Integration",
                detail: "Custom integrations support"
            }
        ],
        includesPlus: true
    }
];

const baseApiUrl = import.meta.env.PUBLIC_BASE_API_URL;
---

<div class="mb-16">
    <div class="max-w-screen-xl mx-auto px-4">
        <div class="flex flex-col space-y-12">
            {developmentPackages.map((devPackage, index) => (
                    <div class="flex flex-col lg:flex-row gap-6 lg:gap-12" data-package-name={devPackage.name}>
                        <div class="w-full lg:w-1/2">
                            <div class="bg-white border-4 border-black p-6 shadow-[8px_8px_0px_0px_rgba(0,0,0,1)] transform -rotate-1 relative">
                                <h3 class="text-2xl font-bold mb-2">{devPackage.name}</h3>
                                <p class="text-gray-600 mb-4">{devPackage.description}</p>

                                <div class="flex items-baseline gap-2 mb-4">
                                    <div class="text-3xl font-bold text-blue-500">
                                        ${devPackage.price}
                                    </div>
                                    <div class="text-xs text-gray-600 font-medium">
                                        + VAT where applicable
                                    </div>
                                </div>

                                <div class="text-sm text-gray-600 mb-6">
                                    Delivery: {devPackage.timeline}
                                </div>

                                <div class="bg-yellow-100 border-2 border-black p-4 mb-6 shadow-[2px_2px_0px_0px_rgba(0,0,0,1)]">
                                    <h4 class="font-bold text-sm mb-2 bg-black text-white inline-block px-2 py-1 transform -rotate-1">
                                        Perfect For
                                    </h4>
                                    <ul class="space-y-2 mt-2">
                                        {devPackage.idealFor.map((ideal) => (
                                                <li class="flex items-start gap-2">
                                                    <Icon name="tabler:point" class="w-4 h-4 flex-shrink-0 mt-1"/>
                                                    <span>{ideal}</span>
                                                </li>
                                        ))}
                                    </ul>
                                </div>

                                <div class="bg-blue-50 border-2 border-black p-3 mb-6">
                                    <h4 class="font-bold text-sm mb-2 bg-black text-white inline-block px-2 py-1 transform -rotate-1">
                                        Payment Schedule (excl. VAT)
                                    </h4>
                                    <div class="space-y-1 mt-2">
                                        {devPackage.paymentStructure.map((payment) => (
                                                <div class="flex justify-between items-center text-sm">
                                                    <span class="text-gray-600">{payment.phase}:</span>
                                                    <span class="font-bold">${payment.amount}</span>
                                                </div>
                                        ))}
                                    </div>
                                </div>

                                <div class="bg-yellow-50 border-2 border-black p-3 mb-6">
                                    <p class="text-sm text-gray-600">
                                        Hosting and domain costs are not included, but I'll guide you through selecting
                                        the right providers and handle all technical setup including SSL certificates
                                        and security configurations.
                                    </p>
                                </div>

                                <div class="text-xs text-gray-500 text-center mb-4">
                                    VAT will be calculated during checkout based on your location and business status
                                </div>

                                <div id={`availability-${index}`} class="mb-4">
                                    <div class="text-center text-gray-600">
                                        <div class="h-6 bg-gray-200 animate-pulse rounded"></div>
                                    </div>
                                </div>

                                <div class="flex items-center justify-center">
                                    <div class="flex flex-col items-center w-full">
                                        <button
                                                type="button"
                                                data-fungies-button={devPackage.paymentButton}
                                                data-package-name={devPackage.name}
                                                class="block w-full text-center bg-gray-200 animate-pulse font-bold py-3 px-6 border-black border-4 shadow-[4px_4px_0px_0px_rgba(0,0,0,1)] transition-all duration-300">
                                            <span class="invisible">Get Started</span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="w-full lg:w-1/2">
                            <div class="bg-white border-2 border-black p-4">
                                <h4 class="text-xl font-bold text-sm mb-2 bg-black text-white inline-block px-2 py-1 transform -rotate-1">
                                    Features
                                </h4>
                                {devPackage.includesPlus && (
                                        <div class="mb-6 mt-4">
                                            <div class="bg-blue-100 border-2 border-black p-3 transform -rotate-1 shadow-[2px_2px_0px_0px_rgba(0,0,0,1)]">
                                                <div class="font-bold text-black">
                                                    Includes everything in Startup Plus, plus:
                                                </div>
                                            </div>
                                        </div>
                                )}
                                {devPackage.includesCore && (
                                        <div class="mb-6 mt-4">
                                            <div class="bg-blue-100 border-2 border-black p-3 transform -rotate-1 shadow-[2px_2px_0px_0px_rgba(0,0,0,1)]">
                                                <div class="font-bold text-black">
                                                    Includes everything in Startup Core, plus:
                                                </div>
                                            </div>
                                        </div>
                                )}
                                <div class="space-y-4 mt-2">
                                    {devPackage.coreFeatures.map((feature) => (
                                            <div class="flex items-start gap-4">
                                                <div class="w-10 h-10 flex-shrink-0 bg-gray-100 border-2 border-black flex items-center justify-center">
                                                    <Icon name={feature.icon} class="w-5 h-5"/>
                                                </div>
                                                <div>
                                                    <span class="font-bold block text-lg">{feature.text}</span>
                                                    <span class="text-gray-600">{feature.detail}</span>
                                                </div>
                                            </div>
                                    ))}
                                </div>
                            </div>
                        </div>
                    </div>
            ))}
        </div>
    </div>
</div>

<script is:inline define:vars={{baseApiUrl}}>
    function initializeFungies() {
        let iframe;
        let spinner;

        window.closeModal = function () {
            const modals = document.querySelectorAll('#modal-root');
            modals.forEach(modal => modal.remove());
        };

        async function checkAvailabilityAndUpdateUI() {
            const availabilityElements = document.querySelectorAll('[id^="availability-"]');

            try {
                const response = await fetch(`${baseApiUrl}/v1/order/available-slots`);
                const data = await response.json();

                for (const element of availabilityElements) {
                    const packageContainer = element.closest('[data-package-name]');
                    const packageName = packageContainer?.dataset.packageName;
                    let availableSlots;

                    switch (packageName) {
                        case 'Startup Core':
                            availableSlots = data.availableSlots.startupCore;
                            break;
                        case 'Startup Plus':
                            availableSlots = data.availableSlots.startupPlus;
                            break;
                        case 'Startup Pro':
                            availableSlots = data.availableSlots.startupPro;
                            break;
                        default:
                            console.warn('Unknown package name:', packageName);
                            availableSlots = 0;
                    }

                    const button = packageContainer?.querySelector('[data-fungies-button]');

                    if (typeof availableSlots === 'number' && availableSlots > 0) {
                        element.innerHTML = `
                            <div class="text-center text-green-600 font-bold">
                                ${availableSlots} ${availableSlots === 1 ? 'slot' : 'slots'} available
                            </div>
                        `;
                        if (button) {
                            button.classList.remove('bg-gray-200', 'animate-pulse');
                            button.classList.add('bg-green-600', 'hover:bg-green-700', 'text-white');
                            button.innerHTML = 'Get Started';
                            button.dataset.hasSlots = 'true';
                        }
                    } else {
                        element.innerHTML = `
                            <div class="text-center text-yellow-600 font-bold">
                                Currently at capacity
                            </div>
                        `;
                        if (button) {
                            button.classList.remove('bg-gray-200', 'animate-pulse');
                            button.classList.add('bg-green-600', 'hover:bg-green-700', 'text-white');
                            button.innerHTML = 'Join Waitlist';
                            button.dataset.hasSlots = 'false';
                        }
                    }
                }

                return true;
            } catch (error) {
                console.error('Failed to check availability:', error);
                availabilityElements.forEach(element => {
                    element.innerHTML = `
                        <div class="text-center text-red-600">
                            Unable to check availability
                        </div>
                    `;
                    const button = element.parentElement?.querySelector('[data-fungies-button]');
                    if (button) {
                        button.classList.remove('bg-gray-200', 'animate-pulse');
                        button.classList.add('bg-green-600', 'hover:bg-green-700', 'text-white');
                        button.innerHTML = 'Get Started';
                    }
                });
                return false;
            }
        }

        function showPaymentFollowupModal() {
            window.closeModal();
            const modalHtml = `
            <div id="modal-root" class="fixed inset-0 bg-black/50 flex items-center justify-center z-[2147483647]">
                <div class="bg-white border-4 border-black p-6 rounded-lg shadow-[4px_4px_0px_0px_rgba(0,0,0,1)] transform -rotate-1 max-w-md w-full mx-4">
                    <h3 class="text-xl font-bold mb-4">Payment Processing</h3>
                    <p class="text-gray-600 mb-4">If you completed your payment, here's what happens next:</p>
                    
                    <div class="bg-yellow-100 border-2 border-black p-3 mb-4">
                        <h4 class="font-bold mb-2">Next Steps:</h4>
                        <ul class="list-disc list-inside text-sm space-y-2">
                            <li>Check your email for payment confirmation</li>
                            <li>You'll receive package instructions shortly</li>
                            <li>Please check spam/promotions folders if not found</li>
                        </ul>
                    </div>

                    <div class="mb-4">
                        <a href="mailto:luke@appsbyluke.com" class="block w-full text-center bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 border-2 border-black shadow-[2px_2px_0px_0px_rgba(0,0,0,1)] transition-all duration-300">
                            Contact Me
                        </a>
                    </div>

                    <button type="button" onclick="closeModal()" class="mt-4 w-full text-sm underline underline-offset-4 decoration-dashed text-gray-600 hover:text-black">
                        Close
                    </button>
                </div>
            </div>
        `;
            const modalElement = document.createElement('div');
            modalElement.innerHTML = modalHtml;
            document.body.appendChild(modalElement.firstElementChild);
        }

        function createSpinner() {
            const spinnerHtml = `
                <div class="fixed inset-0 bg-black/50 flex items-center justify-center z-[2147483646]">
                    <div class="bg-white border-4 border-black p-6 rounded-lg shadow-[4px_4px_0px_0px_rgba(0,0,0,1)] transform -rotate-1">
                        <div class="flex items-center gap-3">
                            <svg class="animate-spin h-8 w-8 text-green-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                            <span class="font-bold text-lg">Loading payment form...</span>
                        </div>
                    </div>
                </div>
            `;
            spinner = document.createElement('div');
            spinner.innerHTML = spinnerHtml;
            document.body.appendChild(spinner);
        }

        function removeSpinner() {
            if (spinner) {
                spinner.remove();
                spinner = null;
            }
        }

        function showWaitlistModal(packageName) {
            window.closeModal();
            const modalHtml = `
            <div id="modal-root" class="fixed inset-0 bg-black/50 flex items-center justify-center z-[2147483647]">
                <div class="bg-white border-4 border-black p-6 rounded-lg shadow-[4px_4px_0px_0px_rgba(0,0,0,1)] transform -rotate-1 max-w-md w-full mx-4">
                    <h3 class="text-xl font-bold mb-4">No Slots Available</h3>
                    <p class="text-gray-600 mb-6">Someone has just booked the last available slot. Would you like to join the waitlist instead?</p>
                    
                    <form id="waitlistForm" class="space-y-4">
                        <div>
                            <label class="block text-sm font-bold mb-2">Name</label>
                            <input type="text" name="name" required class="w-full border-2 border-black p-2" />
                        </div>
                        <div>
                            <label class="block text-sm font-bold mb-2">Email</label>
                            <input type="email" name="email" required class="w-full border-2 border-black p-2" />
                        </div>
                        <input type="hidden" name="packageName" value="${packageName}" />
                        <div class="flex flex-col gap-2">
                            <button type="submit" class="w-full bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 border-2 border-black shadow-[2px_2px_0px_0px_rgba(0,0,0,1)] hover:shadow-[1px_1px_0px_0px_rgba(0,0,0,1)] transition-all duration-300">
                                Join Waitlist
                            </button>
                            <button type="button" onclick="closeModal()" class="w-full text-gray-600 hover:text-black text-sm underline underline-offset-4 decoration-dashed">
                                Close
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        `;
            const modalElement = document.createElement('div');
            modalElement.innerHTML = modalHtml;
            document.body.appendChild(modalElement.firstElementChild);
            document.querySelector('#waitlistForm').addEventListener('submit', handleWaitlistSubmission);
        }

        function showSuccessModal() {
            window.closeModal();
            const modalHtml = `
            <div id="modal-root" class="fixed inset-0 bg-black/50 flex items-center justify-center z-[2147483647]">
                <div class="bg-white border-4 border-black p-6 rounded-lg shadow-[4px_4px_0px_0px_rgba(0,0,0,1)] transform -rotate-1 max-w-md w-full mx-4">
                    <h3 class="text-xl font-bold mb-4">Successfully Joined Waitlist!</h3>
                    <p class="text-gray-600 mb-4">I'll notify you as soon as a slot becomes available. Thank you for your interest!</p>
                    <button type="button" onclick="closeModal()" class="w-full bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 border-2 border-black shadow-[2px_2px_0px_0px_rgba(0,0,0,1)] hover:shadow-[1px_1px_0px_0px_rgba(0,0,0,1)] transition-all duration-300">
                        Close
                    </button>
                </div>
            </div>
        `;
            const modalElement = document.createElement('div');
            modalElement.innerHTML = modalHtml;
            document.body.appendChild(modalElement.firstElementChild);
        }

        function showErrorModal() {
            window.closeModal();
            const modalHtml = `
            <div id="modal-root" class="fixed inset-0 bg-black/50 flex items-center justify-center z-[2147483647]">
                <div class="bg-white border-4 border-black p-6 rounded-lg shadow-[4px_4px_0px_0px_rgba(0,0,0,1)] transform -rotate-1 max-w-md w-full mx-4">
                    <h3 class="text-xl font-bold mb-4">Oops! Something went wrong</h3>
                    <p class="text-gray-600 mb-4">We couldn't add you to the waitlist. Please try again or contact me if the problem persists.</p>
                    <button type="button" onclick="closeModal()" class="w-full bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 border-2 border-black shadow-[2px_2px_0px_0px_rgba(0,0,0,1)] hover:shadow-[1px_1px_0px_0px_rgba(0,0,0,1)] transition-all duration-300">
                        Close
                    </button>
                </div>
            </div>
        `;
            const modalElement = document.createElement('div');
            modalElement.innerHTML = modalHtml;
            document.body.appendChild(modalElement.firstElementChild);
        }

        async function handleWaitlistSubmission(e) {
            e.preventDefault();
            const form = e.target;
            const submitButton = form.querySelector('button[type="submit"]');
            const originalButtonText = submitButton.innerHTML;

            try {
                submitButton.innerHTML = `
                    <div class="flex items-center justify-center gap-2">
                        <svg class="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        Submitting...
                    </div>
                `;
                submitButton.disabled = true;

                const formData = new FormData(form);
                const response = await fetch(`${baseApiUrl}/v1/waitlist/add`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(Object.fromEntries(formData)),
                });

                if (response.ok) {
                    showSuccessModal();
                } else {
                    throw new Error('Failed to join waitlist');
                }
            } catch (error) {
                showErrorModal();
            } finally {
                submitButton.innerHTML = originalButtonText;
                submitButton.disabled = false;
            }
        }

        function messageHandler(event) {
            if (event.data === "closeWindow") {
                iframe?.remove();
                iframe = null;
                removeSpinner();
                showPaymentFollowupModal();
            }
        }

        async function displayIframe(e) {
            e.preventDefault();
            if (iframe) return;

            createSpinner();

            const button = e.currentTarget;
            const packageName = button.dataset.packageName;

            try {
                const response = await fetch(`${baseApiUrl}/v1/order/available-slots`);
                const data = await response.json();

                let availableSlots;
                switch (packageName) {
                    case 'Startup Core':
                        availableSlots = data.availableSlots.startupCore;
                        break;
                    case 'Startup Plus':
                        availableSlots = data.availableSlots.startupPlus;
                        break;
                    case 'Startup Pro':
                        availableSlots = data.availableSlots.startupPro;
                        break;
                    default:
                        availableSlots = 0;
                }

                if (availableSlots <= 0) {
                    removeSpinner();
                    showWaitlistModal(packageName);
                    return;
                }

                iframe = document.createElement("iframe");
                iframe.style = `
                    z-index: 2147483647;
                    display: block;
                    background-color: transparent;
                    border: 0;
                    overflow-x: hidden;
                    overflow-y: auto;
                    visibility: visible;
                    margin: 0;
                    padding: 0;
                    -webkit-tap-highlight-color: transparent;
                    position: fixed;
                    left: 0;
                    top: 0;
                    width: 100%;
                    height: 100%;
                `;

                iframe.addEventListener('load', () => {
                    removeSpinner();
                });

                const src = button.dataset.fungiesButton;
                iframe.src = src;
                iframe.allow = "payment";
                document.body.appendChild(iframe);
            } catch (error) {
                console.error('Failed to check availability:', error);
                removeSpinner();
                showErrorModal();
            }
        }

        window.removeEventListener("message", messageHandler);
        window.addEventListener("message", messageHandler);

        document.querySelectorAll("[data-fungies-button]").forEach(button => {
            button.removeEventListener("click", displayIframe);
            button.addEventListener("click", displayIframe);
        });

        checkAvailabilityAndUpdateUI();
    }

    initializeFungies();
    document.addEventListener('astro:page-load', initializeFungies);
</script>



